package it.trenical.client.gui;

import it.trenical.client.Client;
import it.trenical.client.observer.FidelityUser;
import it.trenical.client.observer.TicketsCache;
import it.trenical.common.Ticket;
import it.trenical.common.Trip;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.text.SimpleDateFormat;
import java.util.Collection;

public class CustomerAreaFrame extends JFrame implements TicketsCache.Observer, FidelityUser.Observer {
    private JList<Ticket> ticketList;
    private JPanel mainPanel;
    private JButton buttonClose;
    private JButton buttonEdit;
    private JButton buttonBuy;
    private JButton buttonFidelity;
    private JLabel fidelityLabel;

    static private final SimpleDateFormat dateFormatter = new SimpleDateFormat("dd/MM/yyyy HH:mm");
    private final DefaultListModel<Ticket> ticketListModel;

    private final MainFrame mainFrame;
    private final Client client;

    CustomerAreaFrame() {
        mainFrame = MainFrame.getInstance();
        client = mainFrame.getClient();
        client.ticketsCacheSub.attach(this);
        client.fidelityUserSub.attach(this);

        setContentPane(mainPanel);
        setTitle("TreniCal - Area Personale");
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        ticketListModel = new DefaultListModel<>();
        ticketList.setCellRenderer(new MultilineCellRenderer());
        ticketList.setModel(ticketListModel);
        ticketList.addListSelectionListener(listSelectionEvent -> {
            buttonBuy.setEnabled(canButtonBuyBeEnabled());
            buttonEdit.setEnabled(canButtonEditBeEnabled());
        });

        buttonClose.addActionListener(actionEvent -> onButtonClose());

        buttonEdit.addActionListener(actionEvent -> onButtonEdit());

        buttonBuy.addActionListener(actionEvent -> onButtonBuy());

        buttonFidelity.addActionListener(actionEvent -> onButtonFidelity());
    }

    private void onButtonFidelity() {
        if (client.getCurrentUser().isFidelity()) {
            mainFrame.cancelFidelity();
        } else {
            mainFrame.becomeFidelity();
        }
    }

    private void onButtonBuy() {
        if (!canButtonBuyBeEnabled()) return;
        mainFrame.payBookedTicketDialog(ticketList.getSelectedValue());
    }

    private boolean canButtonBuyBeEnabled() {
        return !ticketList.isSelectionEmpty() && !ticketList.getSelectedValue().isPaid();
    }

    private void onButtonEdit() {
        if (!canButtonEditBeEnabled()) return;
        mainFrame.editTicketDialog(ticketList.getSelectedValue());
    }

    private boolean canButtonEditBeEnabled() {
        return !ticketList.isSelectionEmpty();
    }

    private void onButtonClose() {
        close();
    }

    @Override
    public void updateTicketsCache() {
        Collection<Ticket> cache = client.getTicketsCache();
        ticketListModel.clear();
        ticketListModel.addAll(cache);
    }

    void display(Component parent) {
        pack();
        setLocationRelativeTo(parent);
        setVisible(true);
    }

    void close() {
        dispose();
    }

    @Override
    public void updateOnFidelityChange() {
        if (client.getCurrentUser().isFidelity()) {
            fidelityLabel.setVisible(true);
            buttonFidelity.setText("Cancella Fedeltà");
        } else {
            fidelityLabel.setVisible(false);
            buttonFidelity.setText("Diventa Fedele");
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 1, new Insets(5, 5, 5, 5), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 5, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        buttonClose = new JButton();
        buttonClose.setText("Chiudi");
        panel1.add(buttonClose, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(80, 35), null, 0, false));
        buttonFidelity = new JButton();
        buttonFidelity.setText("Fedeltà");
        panel1.add(buttonFidelity, new com.intellij.uiDesigner.core.GridConstraints(0, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(80, 35), null, 0, false));
        fidelityLabel = new JLabel();
        fidelityLabel.setText("Sei un utente fedele!");
        panel1.add(fidelityLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(533, 300), null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "I tuoi biglietti", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, null, null));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel2.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        ticketList = new JList();
        scrollPane1.setViewportView(ticketList);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel3, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonEdit = new JButton();
        buttonEdit.setEnabled(false);
        buttonEdit.setText("Modifica");
        panel3.add(buttonEdit, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonBuy = new JButton();
        buttonBuy.setEnabled(false);
        buttonBuy.setText("Acquista");
        panel3.add(buttonBuy, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private static class MultilineCellRenderer extends JTextArea implements ListCellRenderer<Object> {

        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {

            if (value instanceof Ticket t) {
                Trip tr = t.getTrip();

                String date = dateFormatter.format(tr.getDepartureTime().getTime());

                value = String.format("## %s da %s a %s ##\nGiorno %s\n%s %s - %s class\n",
                        t.isPaid() ? "Biglietto" : "Prenotazione",
                        tr.getRoute().getDepartureStation().getTown(),
                        tr.getRoute().getArrivalStation().getTown(),
                        date,
                        t.getName(), t.getSurname(),
                        t.isBusiness() ? "Business" : "Economy"
                );
            }

            setText(value.toString());
            setFont(list.getFont());
            setBackground(isSelected ? list.getSelectionBackground() : list.getBackground());
            setForeground(isSelected ? list.getSelectionForeground() : list.getForeground());
            return this;
        }
    }
}
