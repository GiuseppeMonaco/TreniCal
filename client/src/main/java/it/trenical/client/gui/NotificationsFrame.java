package it.trenical.client.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import it.trenical.client.Client;
import it.trenical.client.notification.*;
import it.trenical.client.observer.NotificationChange;
import it.trenical.common.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class NotificationsFrame extends JDialog implements NotificationChange.Observer {
    private JPanel contentPane;
    private JButton buttonRead;
    private JButton buttonBack;
    private JList<Notification> notificationsList;

    Client client;

    private final DefaultListModel<Notification> notificationsListModel;

    public NotificationsFrame() {
        MainFrame mainFrame = MainFrame.getInstance();
        client = mainFrame.getClient();
        client.notificationChangeSub.attach(this);

        setContentPane(contentPane);
        setTitle("TreniCal - Area notifiche");

        notificationsListModel = new DefaultListModel<>();
        notificationsList.setModel(notificationsListModel);
        notificationsList.setCellRenderer(new MultilineCellRenderer());

        buttonRead.addActionListener(e -> onRead());

        buttonBack.addActionListener(e -> onBack());

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onBack();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(e -> onBack(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    private void onRead() {
        client.clearNotificationBuffer();
        dispose();
    }

    private void onBack() {
        dispose();
    }

    void display(Component parent) {
        pack();
        setLocationRelativeTo(parent);
        setVisible(true);
    }

    @Override
    public void updateOnNotificationChange() {
        notificationsListModel.removeAllElements();
        if (client.getNotificationsCount() < 1) {
            dispose();
            return;
        }
        notificationsListModel.addAll(client.getNotifications());
    }

    private static class MultilineCellRenderer extends JTextArea implements ListCellRenderer<Object> {

        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {

            if (value instanceof AlmostExpiredBookingNotification n) {
                Ticket t = n.getBooking();
                value = String.format("""
                                ## Attenzione, una tua prenotazione sta per scadere... Acquistala ora! ##
                                [%s]
                                """,
                        t
                );
            } else if (value instanceof ExpiredBookingNotification n) {
                Ticket t = n.getBooking();
                value = String.format("""
                                ## Attenzione, una tua prenotazione è scaduta! ##
                                [%s]
                                """,
                        t
                );
            } else if (value instanceof FidelityPromotionNotification n) {
                Promotion p = n.getNewPromotion();
                value = String.format("""
                                ## Nuova offerta riservata ai clienti Fedeltà Treno ##
                                codice: [%s] (sconto del %s)
                                -- %s --
                                %s
                                """,
                        p.getCode(),
                        p.getDiscountPercentage() + "%",
                        p.getName(),
                        p.getDescription()
                ).trim();
            } else if (value instanceof TripCancelledNotification n) {
                Trip tr = n.getCancelledTrip();
                value = String.format("""
                                ## Attenzione, un viaggio per cui avevi dei biglietti è stato annullato ##
                                Ci scusiamo per il disagio.
                                Se avevi acquistato i biglietti, per richiedere un rimborso contatta il supporto clienti.
                                -- [%s] --
                                """,
                        tr
                );
            }

            setText(value.toString());
            setFont(list.getFont());
            setBackground(isSelected ? list.getSelectionBackground() : list.getBackground());
            setForeground(isSelected ? list.getSelectionForeground() : list.getForeground());
            return this;
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(5, 5, 5, 5), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonBack = new JButton();
        buttonBack.setText("Indietro");
        panel2.add(buttonBack, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonRead = new JButton();
        buttonRead.setText("Ho letto");
        panel2.add(buttonRead, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(-1, 300), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel3.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        notificationsList = new JList();
        scrollPane1.setViewportView(notificationsList);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
